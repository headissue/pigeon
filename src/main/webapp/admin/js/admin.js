/*
 * Copyright (C) 2013 headissue GmbH (www.headissue.com)
 *
 * Source repository: https://github.com/headissue/pigeon
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This patch is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this patch.  If not, see <http://www.gnu.org/licenses/agpl.txt/>.
 */

// Generated by CoffeeScript 1.4.0
(function() {
  var Admin, BASE_URL, EditPage, NewPage, OverviewPage, Page, root, templates,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  templates = {};

  $('script[type="text/x-handlebars-template"]').each(function() {
    var $el, id;
    $el = $(this);
    id = $el.attr('id');
    templates[id] = Handlebars.compile($el.html());
    return $el.remove();
  });

  BASE_URL = window.BASE_URL;

  Page = (function() {

    function Page() {
      this.el = $('#' + this.id);
    }

    Page.prototype.activate = function() {
      $('.wrapper .page.current').removeClass('current');
      return this.el.addClass('current');
    };

    Page.prototype.render = function() {};

    Page.prototype.show = function() {
      this.render();
      if (this.bindEvents) {
        this.bindEvents();
      }
      this.activate();
      return this;
    };

    return Page;

  })();

  OverviewPage = (function(_super) {

    __extends(OverviewPage, _super);

    function OverviewPage() {
      this.buttonClicked = __bind(this.buttonClicked, this);
      return OverviewPage.__super__.constructor.apply(this, arguments);
    }

    OverviewPage.prototype.id = 'survey-overview';

    OverviewPage.prototype.render = function() {
      return $.ajax({
        url: BASE_URL + '/api/admin/survey',
        dataType: 'json',
        success: this.fillSurveyList
      });
    };

    OverviewPage.prototype.bindEvents = function() {
      $('ul, #create-survey-button').off('click');
      $('ul', this.el).on('click', 'button', this.buttonClicked);
      return $('#create-survey-button', this.el).on('click', function() {
        return Admin.pages.newSurvey.show();
      });
    };

    OverviewPage.prototype.buttonClicked = function(ev) {
      var btn, name, surveyId;
      ev.preventDefault();
      btn = $(ev.target);
      if (!btn.is('button')) {
        return false;
      }
      surveyId = btn.parent().parent().data('surveyId');
      if (typeof surveyId === 'undefined') {
        return false;
      }
      name = btn.attr('name');
      if (name === 'delete') {
        if (!window.confirm('Do you really want to delete Survey #' + surveyId + '?' + "\n\n" + 'ALL DATA WILL BE LOST!')) {
          return false;
        }
        return this.deleteSurvey(surveyId);
      } else if (name === 'edit') {
        return Admin.pages.editSurvey.setSurveyId(surveyId).show();
      }
    };

    OverviewPage.prototype.fillSurveyList = function(data) {
      var html, survey, _i, _len;
      html = '';
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        survey = data[_i];
        html += templates['survey-list-template'](survey);
      }
      return $('ul', this.el).empty().append(html);
    };

    OverviewPage.prototype.deleteSurvey = function(id) {
      var _this = this;
      return $.ajax({
        type: 'delete',
        url: BASE_URL + '/api/admin/survey/' + id,
        dataType: 'json',
        success: function(data) {
          if (data.id > 0) {
            alert('Survey #' + id + ' has been successfully deleted.');
            return Admin.pages.overview.show();
          }
        },
        error: function() {
          return alert('Your Survey could not be deleted. Please try again / check the console.');
        }
      });
    };

    OverviewPage.prototype.highlightSurvey = function(id) {
      var originalBgColor, surveyEl;
      surveyEl = $('li[data-survey-id="' + id + '"]', this.el);
      if (!(surveyEl.length > 0)) {
        return false;
      }
      originalBgColor = surveyEl.css("backgroundColor") || 'transparent';
      return surveyEl.css('backgroundColor', '#ffff99').animate({
        backgroundColor: originalBgColor
      }, 1300);
    };

    return OverviewPage;

  })(Page);

  NewPage = (function(_super) {

    __extends(NewPage, _super);

    function NewPage() {
      return NewPage.__super__.constructor.apply(this, arguments);
    }

    NewPage.prototype.id = 'survey-new';

    NewPage.prototype.jsonTemplate = null;

    NewPage.prototype.render = function() {
      var _this = this;
      return $.ajax({
        url: BASE_URL + '/api/admin/survey/0',
        dataType: 'text',
        headers: {
          'Accept': 'application/json, text/plain'
        },
        success: function(data) {
          _this.jsonTemplate = data;
          return _this.fillSurveyTemplate();
        }
      });
    };

    NewPage.prototype.bindEvents = function() {
      var _this = this;
      $('#insert-template-button, #submit-new-survey-button').off('click');
      $('#insert-template-button', this.el).on('click', function(ev) {
        ev.preventDefault();
        _this.fillSurveyTemplate();
        return false;
      });
      return $('#submit-new-survey-button', this.el).on('click', function(ev) {
        ev.preventDefault();
        _this.saveSurvey();
        return false;
      });
    };

    NewPage.prototype.fillSurveyTemplate = function() {
      var data;
      if (this.jsonTemplate === null) {
        return false;
      }
      data = this.jsonTemplate;
      if (typeof formatter !== "undefined" && formatter !== null ? formatter.formatJson : void 0) {
        data = formatter.formatJson(data);
      }
      $('textarea', this.el).val(data);
      return true;
    };

    NewPage.prototype.saveSurvey = function() {
      var surveyJson,
        _this = this;
      surveyJson = $('textarea', this.el).val();
      return $.ajax({
        type: 'put',
        url: BASE_URL + '/api/admin/survey',
        data: surveyJson,
        processData: false,
        contentType: 'application/json',
        dataType: 'json',
        success: function(data) {
          if (data.id > 0) {
            alert('Survey #' + data.id + ' has been successfully created.');
            return Admin.pages.overview.show().highlightSurvey(data.id);
          }
        },
        error: function() {
          return alert('Your Survey could not be saved. Please try again / check the console.');
        }
      });
    };

    return NewPage;

  })(Page);

  EditPage = (function(_super) {

    __extends(EditPage, _super);

    function EditPage() {
      this.saveSurvey = __bind(this.saveSurvey, this);

      this.renderWithSurveyJSON = __bind(this.renderWithSurveyJSON, this);
      return EditPage.__super__.constructor.apply(this, arguments);
    }

    EditPage.prototype.id = 'survey-edit';

    EditPage.prototype.surveyId = null;

    EditPage.prototype.setSurveyId = function(id) {
      this.surveyId = id;
      return this;
    };

    EditPage.prototype.render = function() {
      var _this = this;
      if (this.surveyId === null) {
        return false;
      }
      this.el.empty().append('<h3>Edit Survey ' + this.surveyId + '</h3><em>Loading Survey data...</em>');
      return $.ajax({
        url: BASE_URL + '/api/admin/survey/' + this.surveyId,
        dataType: 'text',
        headers: {
          'Accept': 'application/json, text/plain'
        },
        success: this.renderWithSurveyJSON,
        error: function() {
          alert('Survey #' + _this.surveyId + ' could not be loaded. Please try again / check the console.');
          return Admin.pages.overview.show().highlightSurvey(_this.surveyId);
        }
      });
    };

    EditPage.prototype.renderWithSurveyJSON = function(jsontext) {
      var survey;
      survey = {
        id: this.surveyId,
        json: jsontext
      };
      if (typeof formatter !== "undefined" && formatter !== null ? formatter.formatJson : void 0) {
        survey.json = formatter.formatJson(survey.json);
      }
      this.el.empty().append(templates['survey-edit-template'](survey));
      return this.bindEvents();
    };

    EditPage.prototype.bindEvents = function() {
      var _this = this;
      $('#submit-edit-survey-button').off('click');
      return $('#submit-edit-survey-button', this.el).on('click', function(ev) {
        ev.preventDefault();
        _this.saveSurvey();
        return false;
      });
    };

    EditPage.prototype.saveSurvey = function() {
      var surveyId, surveyJson,
        _this = this;
      surveyId = parseInt($('form', this.el).data('surveyId') || '-1');
      if (!(surveyId > 0)) {
        return false;
      }
      surveyJson = $('textarea', this.el).val();
      return $.ajax({
        type: 'post',
        url: BASE_URL + '/api/admin/survey/' + surveyId,
        data: surveyJson,
        processData: false,
        contentType: 'application/json',
        dataType: 'json',
        success: function(data) {
          if (data.id > 0) {
            alert('Survey #' + data.id + ' has been successfully edited.');
            return Admin.pages.overview.show().highlightSurvey(data.id);
          }
        },
        error: function() {
          return alert('Your Survey could not be saved. Please try again / check the console.');
        }
      });
    };

    return EditPage;

  })(Page);

  Admin = root.Admin = {
    pages: {
      overview: new OverviewPage,
      newSurvey: new NewPage,
      editSurvey: new EditPage
    },
    run: function() {
      Admin.pages.overview.show();
      return $('header h1').addClass('clickable').on('click', function() {
        return Admin.pages.overview.show();
      });
    }
  };

  Admin.run();

}).call(this);
