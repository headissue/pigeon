// Generated by CoffeeScript 1.4.0
(function() {
  var Gator, Log, Logger, Pigeon, PigeonBoolQuestion, PigeonChoiceQuestion, PigeonFreeQuestion, PigeonMultipleFreeQuestion, PigeonMultipleQuestion, PigeonQuestion, PigeonSurvey, root, _prevGator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  _prevGator = null;

  if (typeof window.Gator !== "undefined") {
    _prevGator = window.Gator;
  }

  
/* gator v1.1.1 craig.is/riding/gators */
(function(){function r(a,c,b){if("_root"==c)return b;if(a!==b){var j;e||(a.matches&&(e=a.matches),a.webkitMatchesSelector&&(e=a.webkitMatchesSelector),a.mozMatchesSelector&&(e=a.mozMatchesSelector),a.msMatchesSelector&&(e=a.msMatchesSelector),a.oMatchesSelector&&(e=a.oMatchesSelector),e||(e=g.matchesSelector));j=e;if(j.call(a,c))return a;if(a.parentNode)return n++,r(a.parentNode,c,b)}}function s(a,c,i,e){a instanceof Array||(a=[a]);!i&&"function"==typeof c&&(i=c,c="_root");var m=this.id,k=function(a){a:{var c=
k.original;if(b[m][c]){var e=a.target||a.srcElement,d,h,i={},f=h=0;n=0;for(d in b[m][c])if(b[m][c].hasOwnProperty(d)&&(h=r(e,d,j[m].element))&&g.matchesEvent(c,j[m].element,h,"_root"==d,a))n++,b[m][c][d].match=h,i[n]=b[m][c][d];a.stopPropagation=function(){a.cancelBubble=!0};for(h=0;h<=n;h++)if(i[h])for(f=0;f<i[h].length;f++){if(!1===i[h][f].call(i[h].match,a)){g.cancel(a);break a}if(a.cancelBubble)break a}}}},l;for(l=0;l<a.length;l++)if(k.original=a[l],(!b[this.id]||!b[this.id][a[l]])&&g.addEvent(this,
a[l],k),e){var d=a[l],f=c,p=i;if(!p&&!f)b[this.id][d]={};else if(p)for(var q=0;q<b[this.id][d][f].length;q++){if(b[this.id][d][f][q]===p){b[this.id][d][f].pop(q,1);break}}else delete b[this.id][d][f]}else d=a[l],f=c,p=i,b[this.id]||(b[this.id]={}),b[this.id][d]||(b[this.id][d]={}),b[this.id][d][f]||(b[this.id][d][f]=[]),b[this.id][d][f].push(p);return this}function g(a){if(!(this instanceof g)){for(var c in j)if(j[c].element===a)return j[c];k++;j[k]=new g(a,k);return j[k]}this.element=a;this.id=k}
var e,n=0,k=0,b={},j={};g.prototype.on=function(a,c,b){return s.call(this,a,c,b)};g.prototype.off=function(a,c,b){return s.call(this,a,c,b,!0)};g.matchesSelector=function(){};g.cancel=function(a){a.preventDefault();a.stopPropagation()};g.addEvent=function(a,b,e){a.element.addEventListener(b,e,"blur"==b||"focus"==b)};g.matchesEvent=function(){return!0};window.Gator=g})();

/* gator v1.1.1 gator-legacy.js*/
(function(b){var d=b.addEvent;b.addEvent=function(a,c,b){if(a.element.addEventListener)return d(a,c,b);"focus"==c&&(c="focusin");"blur"==c&&(c="focusout");a.element.attachEvent("on"+c,b)};b.matchesSelector=function(a){return"."===a.charAt(0)?-1<(" "+this.className+" ").indexOf(" "+a.slice(1)+" "):"#"===a.charAt(0)?this.id===a.slice(1):this.tagName===a.toUpperCase()};b.cancel=function(a){a.preventDefault&&a.preventDefault();a.stopPropagation&&a.stopPropagation();a.returnValue=!1;a.cancelBubble=!0}})(window.Gator);
;


  Gator = window.Gator;

  window.Gator = _prevGator != null ? _prevGator : void 0;

  if (!Array.prototype.forEach) {
    Array.prototype.forEach = function(fn, scope) {
      var i, that, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        that = this[i];
        _results.push(fn.call(scope, that, i, this));
      }
      return _results;
    };
  }

  Logger = (function() {
    var CMDS, isDev;

    CMDS = ['log', 'info', 'warn', 'error'];

    isDev = function() {
      if (Pigeon.debug) {
        return true;
      }
      if (location.hash.search("pigeondebug=yxcvbnm") > -1) {
        return true;
      }
      return false;
    };

    function Logger() {
      var name, _i, _len;
      for (_i = 0, _len = CMDS.length; _i < _len; _i++) {
        name = CMDS[_i];
        this[name] = (function(name) {
          return function() {
            if (isDev() && (window.console != null)) {
              return window.console[name].apply(console, arguments);
            }
          };
        })(name);
      }
      this.debug = this.log;
    }

    return Logger;

  })();

  Log = new Logger();

  Pigeon = root.Pigeon = {
    BASE_URL: null,
    supported: function() {
      if (typeof document.querySelectorAll === "undefined") {
        return false;
      }
      if (typeof Array.prototype.forEach === "undefined") {
        return false;
      }
      return true;
    },
    findSurveysOnPage: function() {
      var elements, surveys;
      surveys = [];
      elements = document.querySelectorAll('.pigeon');
      Array.prototype.forEach.call(elements, function(element) {
        var surveyId;
        surveyId = element.getAttribute('data-pigeon-surveyid');
        Log.debug("foundSurvey", surveyId);
        if (!surveyId) {
          return true;
        }
        return surveys.push(Pigeon.embedSurvey(surveyId, element));
      });
      return surveys;
    },
    embedSurvey: function(surveyId, element) {
      Log.debug("embedSurvey, ", surveyId, element);
      Pigeon.loadStyles();
      return new PigeonSurvey(surveyId, element);
    },
    loadStyles: function() {
      var link;
      if (document.getElementById('pigeon-css') !== null) {
        return false;
      }
      link = document.createElement('link');
      link.id = 'pigeon-css';
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = Pigeon.BASE_URL + 'css/pigeon.css';
      link.media = 'all';
      return document.getElementsByTagName("head")[0].appendChild(link);
    },
    useJSONP: function() {
      var baseUrl, pageUrl, parseUrl;
      parseUrl = function(url) {
        var a;
        a = document.createElement('a');
        a.href = url;
        return {
          protocol: a.protocol.replace(':', ''),
          host: a.hostname,
          port: a.port,
          query: a.search,
          path: a.pathname.replace(/^([^\/])/, '/$1'),
          relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [0, ''])[1]
        };
      };
      pageUrl = parseUrl(location.href);
      baseUrl = parseUrl(Pigeon.BASE_URL);
      if (pageUrl.protocol === baseUrl.protocol && pageUrl.host === baseUrl.host && pageUrl.port === baseUrl.port) {
        return false;
      }
      return true;
    }
  };

  PigeonSurvey = (function() {

    function PigeonSurvey(surveyId, element) {
      this.sendResultError = __bind(this.sendResultError, this);

      this.sendResultSuccess = __bind(this.sendResultSuccess, this);

      this.answerClicked = __bind(this.answerClicked, this);

      this.nextClicked = __bind(this.nextClicked, this);
      this.el = element;
      this.element = $(element);
      this.id = surveyId;
      this.questions = [];
      this.questionsById = {};
      this.userKey = this.generateUserKey();
      this.parseAttributes();
      this.loadData();
      this.currentQuestion = 0;
      this.firstResultSent = false;
      this.answers = {};
    }

    PigeonSurvey.prototype.generateUserKey = function() {
      var f, t;
      f = function() {
        return Math.floor(Math.random() * 0x10000).toString(16);
      };
      t = (new Date()).getTime().toString(16);
      return "u-" + (f()) + t + (f());
    };

    PigeonSurvey.prototype.parseAttributes = function() {
      var _ref, _ref1;
      this.pageKey = (_ref = this.el.getAttribute('data-pigeon-pagekey')) != null ? _ref : "";
      return this.userData = (_ref1 = this.el.getAttribute('data-pigeon-userdata')) != null ? _ref1 : "";
    };

    PigeonSurvey.prototype.loadData = function() {
      var _this = this;
      this.element.addClass("pigeon-loading");
      Log.debug("load data");
      return $.getJSON(Pigeon.BASE_URL + 'api/survey/' + this.id + (Pigeon.useJSONP() ? '?callback=?' : ''), function(data) {
        if (typeof data === "undefined" || data === null) {
          return false;
        }
        _this.parse(data);
        _this.element.removeClass("pigeon-loading").addClass("pigeon-loaded");
        return _this.display();
      });
    };

    PigeonSurvey.prototype.parse = function(data) {
      var question, questionData, _i, _len, _ref, _results;
      Log.debug("parse", data);
      if (data.name != null) {
        this.name = data.name;
      }
      this.questions = (function() {
        var _i, _len, _ref, _results;
        _ref = data.questions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          questionData = _ref[_i];
          _results.push(PigeonQuestion.createFromObject(questionData));
        }
        return _results;
      })();
      _ref = this.questions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        question = _ref[_i];
        _results.push(this.questionsById[question.id] = question);
      }
      return _results;
    };

    PigeonSurvey.prototype.display = function() {
      var question, questionEl;
      question = this.questions[this.currentQuestion];
      Log.debug("display", question);
      questionEl = document.createElement("div");
      questionEl.innerHTML = '' + question.toHTML();
      Gator(questionEl).on('click', '.pigeon-answer', this.answerClicked);
      Gator(questionEl).on('click', '.pigeon-next', this.nextClicked);
      question.bind(questionEl);
      Log.debug("questionEl", questionEl);
      this.element.empty();
      this.element.append(this.progressBar());
      return this.element.append(questionEl);
    };

    PigeonSurvey.prototype.displayNextQuestion = function() {
      Log.debug("next!", this.currentQuestion, this.questions.length);
      if (this.currentQuestion + 1 > this.questions.length - 1) {
        return this.displayThanks();
      } else {
        this.currentQuestion++;
        return this.display();
      }
    };

    PigeonSurvey.prototype.displayThanks = function() {
      this.element.addClass("pigeon-done");
      return this.element.html("<div class='pigeon-thanks'>\n  <p>Vielen Dank für dein Feedback!</p>\n</div>");
    };

    PigeonSurvey.prototype.progressBar = function() {
      var classes, html, num, _i, _ref;
      html = "<div class='pigeon-progress' title='" + (this.currentQuestion + 1) + "/" + (this.questions.length + 1) + "'>";
      for (num = _i = 0, _ref = this.questions.length; 0 <= _ref ? _i <= _ref : _i >= _ref; num = 0 <= _ref ? ++_i : --_i) {
        classes = ["pigeon-progress-indicator"];
        if (num < this.currentQuestion) {
          classes.push("pigeon-progress-done");
        }
        if (num === this.currentQuestion) {
          classes.push("pigeon-progress-current");
        }
        html += "<div class='" + (classes.join(' ')) + "'></div>";
      }
      html += "</div>";
      return html;
    };

    PigeonSurvey.prototype.nextClicked = function(event) {
      var $el, el, lastAnswerEl, name, question, questionId, wrapper, _base, _ref, _self;
      el = event.target || event.srcElement;
      $el = $(el);
      name = el.name;
      questionId = parseInt(name.replace(/pigeon-next-(.*)/, '$1'));
      if (questionId !== this.questions[this.currentQuestion].id) {
        throw "Got an old event";
      }
      question = this.questionsById[questionId];
      if (typeof question === "undefined") {
        throw "Question not found";
      }
      if (question.type !== "multiple" && question.type !== "multiplefree") {
        this.answers[questionId] = [];
      } else {
        if ((_ref = (_base = this.answers)[questionId]) == null) {
          _base[questionId] = [];
        }
      }
      wrapper = $el.parents('.pigeon-answers');
      _self = this;
      lastAnswerEl = null;
      wrapper.find('.pigeon-answer').each(function() {
        var answerEl, value;
        answerEl = this;
        if ((question.type !== 'multiple' && question.type !== "multiplefree") || answerEl["checked"]) {
          _self.answers[questionId].push(answerEl.value);
        }
        if (question.type === "multiplefree" && answerEl["type"] === "text") {
          value = "";
          if (lastAnswerEl !== null && lastAnswerEl["checked"] === true) {
            value = lastAnswerEl.value;
          }
          _self.answers[questionId].push(value);
        }
        return lastAnswerEl = answerEl;
      });
      Log.debug("pushed answers for questionId " + questionId + ":", this.answers[questionId]);
      return this.sendResult(questionId);
    };

    PigeonSurvey.prototype.answerClicked = function(event) {
      var answer, el, name, question, questionId, _base, _ref;
      el = event.target || event.srcElement;
      Log.debug("answerClicked", el, event);
      name = el.name;
      questionId = parseInt(name.replace(/pigeon-answer-(.*)/, '$1'));
      if (questionId !== this.questions[this.currentQuestion].id) {
        throw "Got an old event";
      }
      question = this.questionsById[questionId];
      if (typeof question === "undefined") {
        throw "Question not found";
      }
      if ((question.hasNextButton != null) === true) {
        Log.debug("next button available, ignoring this click");
        return;
      }
      answer = el.value;
      if (question.type !== "multiple") {
        this.answers[questionId] = [];
      } else {
        if ((_ref = (_base = this.answers)[questionId]) == null) {
          _base[questionId] = [];
        }
      }
      this.answers[questionId].push(answer.toString());
      Log.debug("pushed answer for questionId " + questionId + ":", this.answers[questionId]);
      return this.sendResult(questionId);
    };

    PigeonSurvey.prototype.sendData = function(method, url, data) {
      var fn;
      if (typeof $.ajax.compat !== "undefined") {
        fn = $.ajax.compat;
      } else {
        fn = $.ajax;
      }
      return fn({
        type: method.toUpperCase(),
        url: url,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: 'json',
        success: this.sendResultSuccess,
        error: this.sendResultError
      });
    };

    PigeonSurvey.prototype.sendFirstResult = function(answerData) {
      var data;
      Log.debug("sendFirstResult");
      data = {
        page_key: this.pageKey,
        user_key: this.userKey,
        user_data: this.userData,
        answers: [answerData]
      };
      return this.sendData('PUT', Pigeon.BASE_URL + 'api/survey/' + this.id + '/answers', data);
    };

    PigeonSurvey.prototype.sendResult = function(questionId) {
      var answerData, data;
      answerData = {
        question_id: questionId,
        values: this.answers[questionId]
      };
      Log.debug("sendResult", answerData);
      if (!this.firstResultSent) {
        return this.sendFirstResult(answerData);
      }
      data = {
        answers: [answerData]
      };
      return this.sendData('POST', Pigeon.BASE_URL + 'api/survey/' + this.id + '/answers/' + this.userAnswerSetId, data);
    };

    PigeonSurvey.prototype.sendResultSuccess = function(data) {
      Log.debug("gotSuccess", data);
      this.userAnswerSetId = data.id;
      this.firstResultSent = true;
      return this.displayNextQuestion();
    };

    PigeonSurvey.prototype.sendResultError = function(xhr, type) {
      Log.debug("gotError", xhr, type);
      this.element.addClass("pigeon-fail");
      return this.element.html("<div class='pigeon-error'>\n  <p>Danke für dein Feedback, aber unser Server konnte es wegen eines internen Fehlers leider nicht annehmen.</p>\n</div>");
    };

    return PigeonSurvey;

  })();

  PigeonQuestion = (function() {

    function PigeonQuestion(options) {
      this.id = options.id;
      if (options.title != null) {
        this.title = options.title;
      }
      this.text = options.text;
      if (options.answers != null) {
        this.answers = options.answers;
      }
    }

    PigeonQuestion.prototype.toHTML = function() {
      throw "Use the Subclass!";
    };

    PigeonQuestion.prototype.wrapHTML = function(answersHTML) {
      Log.debug("wrapHTML", this, this.type);
      return "<div class='pigeon-question pigeon-question-" + this.type + "'>\n  <!-- " + this.title + " -->\n  <p class='pigeon-question-text'>" + this.text + "</p>\n  <div class='pigeon-answers pigeon-answers-" + this.type + "'>\n    " + answersHTML + "\n  </div>\n</div>";
    };

    PigeonQuestion.prototype.bind = function(el) {};

    return PigeonQuestion;

  })();

  PigeonQuestion.createFromObject = function(obj) {
    var qst;
    if (!obj.type) {
      throw "A Question needs a type";
    }
    qst = (function() {
      switch (obj.type) {
        case "free":
          return new PigeonFreeQuestion(obj);
        case "bool":
          return new PigeonBoolQuestion(obj);
        case "choice":
          return new PigeonChoiceQuestion(obj);
        case "multiple":
          return new PigeonMultipleQuestion(obj);
        case "multiplefree":
          return new PigeonMultipleFreeQuestion(obj);
        default:
          throw "QuestionType " + obj.type + " unknown";
      }
    })();
    return qst;
  };

  PigeonFreeQuestion = (function(_super) {

    __extends(PigeonFreeQuestion, _super);

    function PigeonFreeQuestion() {
      return PigeonFreeQuestion.__super__.constructor.apply(this, arguments);
    }

    PigeonFreeQuestion.prototype.type = "free";

    PigeonFreeQuestion.prototype.hasNextButton = true;

    PigeonFreeQuestion.prototype.toHTML = function() {
      var html;
      html = "<input type='text' name='pigeon-answer-" + this.id + "' class='pigeon-answer' value='' />";
      html += "<button name='pigeon-next-" + this.id + "' class='pigeon-next'>Weiter</button>";
      return this.wrapHTML(html);
    };

    return PigeonFreeQuestion;

  })(PigeonQuestion);

  PigeonBoolQuestion = (function(_super) {

    __extends(PigeonBoolQuestion, _super);

    PigeonBoolQuestion.prototype.type = "bool";

    function PigeonBoolQuestion(options) {
      var _ref;
      if (((_ref = options.answers) != null ? _ref.length : void 0) !== 2) {
        throw "Boolean Questions must contain only two answers.";
      }
      PigeonBoolQuestion.__super__.constructor.call(this, options);
    }

    PigeonBoolQuestion.prototype.toHTML = function() {
      var answer, html, _i, _len, _ref;
      html = "";
      _ref = this.answers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        html += "<button name='pigeon-answer-" + this.id + "' class='pigeon-answer' value='" + answer.id + "'>" + answer.text + "</button>";
      }
      return this.wrapHTML(html);
    };

    return PigeonBoolQuestion;

  })(PigeonQuestion);

  PigeonChoiceQuestion = (function(_super) {

    __extends(PigeonChoiceQuestion, _super);

    function PigeonChoiceQuestion() {
      return PigeonChoiceQuestion.__super__.constructor.apply(this, arguments);
    }

    PigeonChoiceQuestion.prototype.type = "choice";

    PigeonChoiceQuestion.prototype.toHTML = function() {
      var answer, html, _i, _len, _ref;
      html = "";
      _ref = this.answers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        html += "<label for='pigeon-answer-" + this.id + "-" + answer.id + "'>       <input type='radio' id='pigeon-answer-" + this.id + "-" + answer.id + "' class='pigeon-answer' name='pigeon-answer-" + this.id + "' value='" + answer.id + "' />       " + answer.text + "       </label>";
      }
      return this.wrapHTML(html);
    };

    return PigeonChoiceQuestion;

  })(PigeonQuestion);

  PigeonMultipleQuestion = (function(_super) {

    __extends(PigeonMultipleQuestion, _super);

    function PigeonMultipleQuestion() {
      return PigeonMultipleQuestion.__super__.constructor.apply(this, arguments);
    }

    PigeonMultipleQuestion.prototype.type = "multiple";

    PigeonMultipleQuestion.prototype.hasNextButton = true;

    PigeonMultipleQuestion.prototype.toHTML = function() {
      var answer, html, _i, _len, _ref;
      html = "";
      _ref = this.answers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        html += "<label for='pigeon-answer-" + this.id + "-" + answer.id + "'>        <input type='checkbox' id='pigeon-answer-" + this.id + "-" + answer.id + "' class='pigeon-answer' name='pigeon-answer-" + this.id + "' value='" + answer.id + "' />        " + answer.text + "        </label>";
      }
      html += "<button name='pigeon-next-" + this.id + "' class='pigeon-next'>Weiter</button>";
      return this.wrapHTML(html);
    };

    return PigeonMultipleQuestion;

  })(PigeonQuestion);

  PigeonMultipleFreeQuestion = (function(_super) {

    __extends(PigeonMultipleFreeQuestion, _super);

    function PigeonMultipleFreeQuestion() {
      return PigeonMultipleFreeQuestion.__super__.constructor.apply(this, arguments);
    }

    PigeonMultipleFreeQuestion.prototype.type = "multiplefree";

    PigeonMultipleFreeQuestion.prototype.hasNextButton = true;

    PigeonMultipleFreeQuestion.prototype.toHTML = function() {
      var answer, html, i, _i, _len, _ref;
      html = "";
      i = 0;
      _ref = this.answers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        html += "<label for='pigeon-answer-" + this.id + "-" + answer.id + "'>        <input type='checkbox' id='pigeon-answer-" + this.id + "-" + answer.id + "' class='pigeon-answer' name='pigeon-answer-" + this.id + "' value='" + answer.id + "' />        " + answer.text + "        </label>";
        if (this.answers.length === ++i) {
          html += "<div class='pigeon-answers-free'>          <input type='text' id='pigeon-answer-" + this.id + "-" + answer.id + "-free' class='pigeon-answer' name='pigeon-answer-" + this.id + "-free' value=''/>          </div>";
        }
      }
      html += "<button name='pigeon-next-" + this.id + "' class='pigeon-next'>Weiter</button>";
      return this.wrapHTML(html);
    };

    PigeonMultipleFreeQuestion.prototype.checkedValue = function(event) {
      var checkboxEl, el, id;
      el = event.target || event.srcElement;
      Log.debug("freetextField focused/blurred", el, event);
      id = el.id;
      checkboxEl = document.getElementById(id.replace(/-free$/, ''));
      if (checkboxEl != null) {
        return checkboxEl["checked"] = el.value !== "";
      }
    };

    PigeonMultipleFreeQuestion.prototype.bind = function(el) {
      Gator(el).on('focus', '.pigeon-answers-free input', this.checkedValue);
      Gator(el).on('blur', '.pigeon-answers-free input', this.checkedValue);
      return PigeonMultipleFreeQuestion.__super__.bind.call(this, el);
    };

    return PigeonMultipleFreeQuestion;

  })(PigeonQuestion);

  if (!Pigeon.BASE_URL) {
    (function(name) {
      var i, l, length, scripts, src, _results;
      scripts = document.getElementsByTagName("script");
      i = scripts.length - 1;
      length = name.length;
      _results = [];
      while (i >= 0) {
        src = scripts[i].src;
        l = src.length;
        if (src.substr(l - length) === name) {
          Pigeon.BASE_URL = src.substr(0, l - length);
        }
        _results.push(--i);
      }
      return _results;
    })("js/pigeon.js");
  }

  Pigeon.supported() && Pigeon.findSurveysOnPage();

}).call(this);
